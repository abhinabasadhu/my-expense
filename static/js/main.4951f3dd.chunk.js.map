{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpenseFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpenseFilter","value","selected","onChange","event","onChangeFilter","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","useState","title","console","log","amount","ExpensesList","item","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","enteredYear","setEnteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredDate","setEnteredDate","enteredAmount","setEnteredAmount","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpense","isEditing","setEditing","enteredExpenseData","random","onAddExpense","DUMMY_EXPENSES","App","setExpenses","prevExpense","ReactDOM","render","document","getElementById"],"mappings":"0ZAOeA,MAJf,SAAcC,GACV,IAAMC,EAAU,QAAUD,EAAME,UAChC,OAAO,qBAAKA,UAAWD,EAAhB,SAA0BD,EAAMG,YCiB5BC,G,MAnBO,SAACJ,GAIrB,OACE,qBAAKE,UAAU,kBAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,mDACA,yBAAQG,MAAQL,EAAMM,SAAUC,SAPjB,SAACC,GACpBR,EAAMS,eAAeD,EAAME,OAAOL,QAM9B,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,4B,kBCHKM,MAXf,SAAqBX,GACrB,IAAMY,EAAQZ,EAAMa,KAAKC,eAAe,QAAS,CAAEF,MAAO,SAClDG,EAAMf,EAAMa,KAAKC,eAAe,QAAS,CAAEC,IAAK,YAChDC,EAAOhB,EAAMa,KAAKI,cACxB,OAAQ,sBAAKf,UAAU,eAAf,UACN,qBAAKA,UAAU,sBAAf,SAAsCU,IACtC,qBAAKV,UAAU,oBAAf,SAAoCa,IACpC,qBAAKb,UAAU,qBAAf,SAAqCc,QCwB1BE,MAhBf,SAAqBlB,GAEnB,MAA0BmB,mBAASnB,EAAMoB,OAAzC,mBAGA,OAHA,UAEAC,QAAQC,IAAI,kCAEV,eAAC,EAAD,CAAMpB,UAAU,eAAhB,UACE,cAAC,EAAD,CAAaW,KAAMb,EAAMa,OACzB,sBAAKX,UAAU,4BAAf,UACE,6BAAKF,EAAMoB,QACX,sBAAKlB,UAAU,sBAAf,iBAAuCF,EAAMuB,iBCRtCC,EAhBM,SAACxB,GACpB,OAA0B,IAAtBA,EAAMyB,KAAKC,OACN,oBAAIxB,UAAU,0BAAd,gCAEF,oBAAIA,UAAU,eAAd,SACLF,EAAMyB,KAAKE,KAAI,SAACC,GAAD,OACb,cAAC,EAAD,CAEER,MAAOQ,EAAQR,MACfG,OAAQK,EAAQL,OAChBV,KAAMe,EAAQf,MAHTe,EAAQC,U,OCSNC,G,YAhBE,SAAC9B,GAClB,IAAI+B,EAAgB,KAKlB,OAHC/B,EAAMgC,SAAW,IAChBD,EAAgBE,KAAKC,MAAOlC,EAAMK,MAAQL,EAAMgC,SAAY,KAAO,KAGnE,sBAAK9B,UAAU,YAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,kBAAkBiC,MAAO,CAACC,OAAQL,OAEnD,qBAAK7B,UAAU,mBAAf,SAAmCF,EAAMqC,aCKhCC,EAhBD,SAACtC,GACb,IAAMuC,EAAkBvC,EAAMwC,WAAWb,KAAI,SAACc,GAAD,OAAeA,EAAUpC,SAChEqC,EAAeT,KAAKU,IAAL,MAAAV,KAAI,YAAQM,IACjC,OACE,qBAAKrC,UAAU,QAAf,SACGF,EAAMwC,WAAWb,KAAI,SAACc,GAAD,OACpB,cAAC,EAAD,CAEEpC,MAAOoC,EAAUpC,MACjB2B,SAAUU,EACVL,MAAOI,EAAUJ,OAHZI,EAAUJ,aCeVO,EAtBO,SAAC5C,GACrB,IAD+B,EACzB6C,EAAkB,CACtB,CAAER,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,GACvB,CAAEgC,MAAO,MAAOhC,MAAO,IAbM,cAeTL,EAAM8C,UAfG,IAe/B,2BAAsC,CAAC,IAA5BlB,EAA2B,QAEpCiB,EADqBjB,EAAQf,KAAKkC,YACJ1C,OAASuB,EAAQL,QAjBlB,8BAmB/B,OAAO,cAAC,EAAD,CAAOiB,WAAYK,KCiBbG,MAxBf,SAAkBhD,GAChB,MAAsCmB,mBAAS,QAA/C,mBAAO8B,EAAP,KAAoBC,EAApB,KAKMC,EAAmBnD,EAAMyB,KAAK2B,QAAO,SAACxB,GAC1C,OAAOA,EAAQf,KAAKI,cAAcoC,aAAeJ,KAGnD,OACE,8BACE,eAAC,EAAD,CAAM/C,UAAU,WAAhB,UACE,cAAC,EAAD,CACEI,SAAU2C,EACVxC,eAZoB,SAAC6C,GAC3BJ,EAAeI,MAaX,cAAC,EAAD,CAAeR,SAAUK,IAC1B,cAAC,EAAD,CAAc1B,KAAO0B,U,OC0DbI,G,YA/EK,SAACvD,GACnB,MAAwCmB,mBAAS,IAAjD,mBAAOqC,EAAP,KAAqBC,EAArB,KAMA,EAAsCtC,mBAAS,IAA/C,mBAAOuC,EAAP,KAAoBC,EAApB,KAMA,EAA0CxC,mBAAS,IAAnD,mBAAOyC,EAAP,KAAsBC,EAAtB,KA0BA,OACE,uBAAMC,SArBc,SAACtD,GACrBA,EAAMuD,iBAEN,IAAMC,EAAc,CAClB5C,MAAOoC,EACPjC,QAASqC,EACT/C,KAAM,IAAIoD,KAAKP,IAOjB1D,EAAMkE,kBAAkBF,GAExBP,EAAgB,IAChBI,EAAiB,IACjBF,EAAe,KAIf,UACE,sBAAKzD,UAAU,wBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,0CACA,uBACEiE,KAAK,OACL9D,MAAOmD,EACPjD,SA5CiB,SAACC,GAC1BiD,EAAgBjD,EAAME,OAAOL,aA8CzB,sBAAKH,UAAU,uBAAf,UACE,2CACA,uBACEiE,KAAK,SACLC,IAAI,OACJC,KAAK,OACLhE,MAAOuD,EACPrD,SA1CkB,SAACC,GAC3BqD,EAAiBrD,EAAME,OAAOL,aA4C1B,sBAAKH,UAAU,uBAAf,UACE,yCACA,uBACEiE,KAAK,OACLC,IAAI,aACJzB,IAAI,aACJtC,MAAOqD,EACPnD,SA1DiB,SAACC,GAC1BmD,EAAenD,EAAME,OAAOL,gBA6D1B,sBAAKH,UAAU,uBAAf,UACE,wBAAQiE,KAAK,SAASG,QAAStE,EAAMuE,SAArC,oBACA,wBAAQJ,KAAK,SAAb,iCC5COK,EArCI,SAACxE,GAUlB,MAAiCmB,oBAAS,GAA1C,mBAAOsD,EAAP,KAAmBC,EAAnB,KAmBA,OACE,sBAAKxE,UAAU,cAAf,WACEuE,GAAa,wBAAQH,QANI,WAC3BI,GAAW,IAKI,6BACdD,GAAa,cAAC,EAAD,CAAaP,kBArBE,SAACS,GAC9B,IAAMX,EAAW,2BACZW,GADY,IAEf9C,GAAII,KAAK2C,SAASvB,aAEpBhC,QAAQC,IAAI0C,GACZhE,EAAM6E,aAAab,GACnBU,GAAW,IAc2DH,SAX7C,WACzBG,GAAW,UCrBTI,EAAiB,CACrB,CACEjD,GAAI,KACJT,MAAO,eACPG,OAAQ,MACRV,KAAM,IAAIoD,KAAK,KAAM,EAAG,KAE1B,CAAEpC,GAAI,KAAMT,MAAO,SAAUG,OAAQ,OAAQV,KAAM,IAAIoD,KAAK,KAAM,EAAG,KACrE,CACEpC,GAAI,KACJT,MAAO,gBACPG,OAAQ,OACRV,KAAM,IAAIoD,KAAK,KAAM,EAAG,KAE1B,CACEpC,GAAI,KACJT,MAAO,oBACPG,OAAQ,IACRV,KAAM,IAAIoD,KAAK,KAAM,EAAG,MAwBbc,MAnBf,WACE,MAA8B5D,mBAAS2D,GAAvC,mBAAOhC,EAAP,KAAiBkC,EAAjB,KAWA,OACE,gCACE,cAAC,EAAD,CAAYH,aAXU,SAACjD,GACzBP,QAAQC,IAAIM,GACdoD,GAAY,SAACC,GACX,MAAM,CAAErD,GAAR,mBAAoBqD,UASlB,cAAC,EAAD,CAAUxD,KAAMqB,QCrCtBoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4951f3dd.chunk.js","sourcesContent":["import './Card.css'\r\n// to fix the look we add awhite space and create \r\n// a wrapper just to add extra css properties along with ourt custom component\r\nfunction Card(props){\r\n    const classes = 'card ' + props.className;\r\n    return <div className={classes}>{props.children}</div>;\r\n}\r\nexport default Card;","import { useState } from \"react\";\r\nimport \"./ExpenseFilter.css\";\r\n\r\nconst ExpenseFilter = (props) => {\r\n  const yearSelector = (event) => {\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select value ={props.selected} onChange={yearSelector}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseFilter;\r\n","import './ExpenseDate.css'\r\nfunction ExpenseDate(props) {\r\nconst month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n  return (<div className=\"expense-date\">\r\n    <div className=\"expense-date__month\">{month}</div>\r\n    <div className=\"expense-date__day\">{day}</div>\r\n    <div className=\"expense-date__year\">{year}</div>\r\n  </div>);\r\n}\r\n\r\nexport default ExpenseDate;","// the props from the app.js is accessed here.\r\n// each item with the array numbering is setup with each property of date , amount and title\r\n// We split the date component so that we can keep the code lean\r\n// We call prosp in the function in the ExpenseDate\r\n// So we call that function here And use the ExpenseDate component and set the date as prop.date\r\n// useState is a react hook helps to change the state of a item\r\n// useState should be called directly on the function not in the nested fuction and not aboce the or below the function\r\n// we will not assign values with = sign but we will assign values by calling useState\r\n// first value is the value itself and the second value is the value to set to be updates\r\n// title is =  to props.title\r\n// setTitle is a function which we can later call to set a new title we call it anything the convention is imp\r\n// always returns a array of 2 elements\r\nimport \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\nimport { useState } from \"react\";\r\nfunction ExpenseItem(props) {\r\n  // function for the button handler called when event occurs\r\n  const [title, setTitle] = useState(props.title);\r\n  // prints 4 times as we are using it 4 times in Expenses\r\n  console.log(\"ExpesneItem evaluated by React\");\r\n  return (\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date} />\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">Â£{props.amount}</div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n","import \"./ExpensesList.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nconst ExpensesList = (props) => {\r\n  if (props.item.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">Found No Expenses </h2>\r\n  }\r\n  return <ul className=\"expense-list\"> \r\n   {props.item.map((expense) => (\r\n      <ExpenseItem\r\n        key={expense.id}\r\n        title={expense.title}\r\n        amount={expense.amount}\r\n        date={expense.date}\r\n      />\r\n    ))\r\n   }\r\n  </ul>;\r\n};\r\nexport default ExpensesList;\r\n","import \"./ChartBar.css\";\r\n\r\nconst ChartBar = (props) => {\r\nlet barFillHeight = '0%';\r\n\r\nif(props.maxValue > 0){\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\r\n}\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div className=\"chart-bar__fill\" style={{height: barFillHeight }}></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  const totalMaximum = Math.max(...dataPointValues); // spreading the array of 12 months value\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => \r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Chart;\r\n","import Chart from \"../Chart/Chart\";\r\n\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    { label: \"Jan\", value: 0 },\r\n    { label: \"Feb\", value: 0 },\r\n    { label: \"Mar\", value: 0 },\r\n    { label: \"Apr\", value: 0 },\r\n    { label: \"May\", value: 0 },\r\n    { label: \"Jun\", value: 0 },\r\n    { label: \"Jul\", value: 0 },\r\n    { label: \"Aug\", value: 0 },\r\n    { label: \"Sep\", value: 0 },\r\n    { label: \"Oct\", value: 0 },\r\n    { label: \"Nov\", value: 0 },\r\n    { label: \"Dec\", value: 0 },\r\n  ];\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth(); //starting at 0 as jan\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","// When we combine components we are using composition\r\n// important part of it is the props.children feature which we learned in the Card.js\r\n// using map we are rending the expense list\r\n// key can be used in any component and if it is added it helps react identify this new item\r\n// props.item is the array of expenses\r\n// to get the filtered array according tot eh years\r\n// we are simply getting the expense.date and compare it with user entered-Year\r\n// the part before  &&  is true the part after  && is rendered\r\nimport \"./Expenses.css\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpenseFilter from \"./ExpenseFilter\";\r\nimport { useState } from \"react\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nfunction Expenses(props) {\r\n  const [enteredYear, setEnteredYear] = useState(\"2020\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setEnteredYear(selectedYear);\r\n  };\r\n  const filteredExpenses = props.item.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === enteredYear;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpenseFilter\r\n          selected={enteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        <ExpensesChart expenses={filteredExpenses}/>\r\n       <ExpensesList item ={filteredExpenses} />\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Expenses;\r\n","// we get an default event object automatically onChange prop\r\n// this event object has a property value and target properties from there we can fetch the value with every key stroke\r\n// to clear the values after add Enpense we use two way binding\r\n// we set the Enetered value to empty on submit and add the value prop in the input html tag\r\n// using state to store the entered value\r\n// enteredTitle is initially empty so the usestate\r\n// is set to empty \"\" which changes later on in the function\r\n\r\nimport { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n  };\r\n\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  const dateChangeHandller = (event) => {\r\n    setEnteredDate(event.target.value);\r\n  };\r\n\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n  };\r\n\r\n  const sumbitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n    // we execute the saveExpensehandler from the\r\n    // NewExpense component where we use the ExpenseForm\r\n    // and point it on the saveExpenseDataHandler\r\n    // as we are passing function this is\r\n    // the way to comunicate between children to parent moving up\r\n    props.onSaveExpenseData(expenseData); // expenseData is passed as a arg and will be received as a param in the saveExpenseDataHandler\r\n    // setting  the input labels empty once the form is submitted\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={sumbitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandller}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={props.onCancel}>Cancel</button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n\r\n// valid alternative to the state change\r\n// const [userInput , setUserInput] =useState({\r\n//   enteredTitle = '',\r\n//   enteredDate = '',\r\n//   enteredAmount = ''\r\n//  });\r\n// const titleChangeHAnfler = () =>{\r\n//  setUserInput((prevState) =>{\r\n//  return { ... prevState, enteredTilte = event.target.value};\r\n// }\r\n// }\r\n","import \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useState } from \"react\";\r\nconst NewExpense = (props) => {\r\n  // onSaveExpenseData is a our built property\r\n  // we can name it howerver we want\r\n  // it is a property which has a value\r\n  // the value is a fuction\r\n  // which can be called in the ExpenseForm component\r\n  // enteredExpenseData is the param reveiced from\r\n  // the ExpenseForm props.onSaveExpenseData(expenseData)\r\n  // expenseData = enteredExpenseData.\r\n  // trick is the pointer to a function\r\n  const [isEditing , setEditing] = useState(false);\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    console.log(expenseData);\r\n    props.onAddExpense(expenseData);\r\n    setEditing(false);\r\n  };\r\n\r\n  const stopEditinghandler = () =>{\r\n    setEditing(false);\r\n  }\r\n\r\n  const startEditingHandlerr = () =>{\r\n    setEditing(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n    {!isEditing && <button onClick={startEditingHandlerr}>Add New Expense</button> }  \r\n    {isEditing && <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} onCancel={stopEditinghandler} /> }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import { useState } from \"react\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\n\nfunction App() {\n  const [expenses, setExpenses]=useState(DUMMY_EXPENSES);\n \n  const addExpenseHandler = (expense) => {\n    console.log(expense);\n  setExpenses((prevExpense)=>{\n    return [expense, ...prevExpense];\n  });\n  };\n  // here we are here setting the\n  // values of PROPS dynamically which is\n  // later on executed in the ExpenseItem.js\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses item={expenses} />\n    </div>\n  );\n}\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}